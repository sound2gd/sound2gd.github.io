<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NIO on Chris的博客</title><link>http://sound2gd.wang/tags/nio/</link><description>Recent content in NIO on Chris的博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Jul 2018 00:11:50 +0800</lastBuildDate><atom:link href="http://sound2gd.wang/tags/nio/index.xml" rel="self" type="application/rss+xml"/><item><title>Java NIO分析(12): NIO总结</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%9012-nio%E6%80%BB%E7%BB%93/</link><pubDate>Tue, 31 Jul 2018 00:11:50 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%9012-nio%E6%80%BB%E7%BB%93/</guid><description>&lt;p>迟来的总结，NIO系列写了11篇了，本篇做个总结吧
写这个系列的起因是各个框架比如&lt;code>netty&lt;/code>, &lt;code>tomcat&lt;/code>, &lt;code>jetty&lt;/code>这些高性能框架的
基石就是&lt;code>NIO&lt;/code>, 一直想讲讲它们高性能的原因。&lt;/p></description></item><item><title>Java NIO分析(10): JVM堆外内存利用改进: DirectBuffer详解</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%9010-jvm%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E5%88%A9%E7%94%A8%E6%94%B9%E8%BF%9B-directbuffer%E8%AF%A6%E8%A7%A3/</link><pubDate>Sat, 21 Jul 2018 23:45:47 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%9010-jvm%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E5%88%A9%E7%94%A8%E6%94%B9%E8%BF%9B-directbuffer%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>前面我们详细讲了&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%908-%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83selector%E8%AF%A6%E8%A7%A3/">Java-NIO分析-8-Selector详解&lt;/a>和&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%909-%E4%BB%8Ebsd-socket%E5%88%B0socketchannel/">Java-NIO分析-9-从BSD-socket到SocketChannel&lt;/a>, 分别是NIO的事件分发器和非阻塞处理器.&lt;/p>
&lt;p>为了支持&lt;code>Channel&lt;/code>的双向读写和&lt;code>Scatter/Gather&lt;/code>操作，我们还需要&lt;code>Buffer&lt;/code>,将I/O数据存储备用。普通的Buffer都是JVM堆内的Buffer, 比较好理解.&lt;/p>
&lt;p>接下来我们聊聊JVM使用堆外内存的沧桑历史以及为什么要设计出&lt;code>DirectBuffer&lt;/code>。&lt;/p></description></item><item><title>Java NIO分析(9): 从BSD socket到SocketChannel</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%909-%E4%BB%8Ebsd-socket%E5%88%B0socketchannel/</link><pubDate>Mon, 16 Jul 2018 07:56:32 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%909-%E4%BB%8Ebsd-socket%E5%88%B0socketchannel/</guid><description>&lt;p>前面我们讲了高并发核心&lt;code>Selector&lt;/code>的源码分析，看到其对操作系统I/O多路复用的简单封装。
有了I/O多路复用之后，我们还需要&lt;strong>非阻塞的socket读写操作&lt;/strong>.&lt;/p>
&lt;p>因为内核告诉你&lt;strong>A连接&lt;/strong>有数据可读，你想要读1K, 事实上只读到了0.5K, 如果使用传统的
socket API, 那么进程或者线程会在这里&lt;strong>阻塞&lt;/strong>，浪费了CPU的时钟周期和珍贵的线程资源。
使用非阻塞就能在没有读满之前立刻返回，数据先放内存里，然后继续读下一个&lt;strong>B连接&lt;/strong>的数据。&lt;/p>
&lt;p>&lt;code>SocketChannel&lt;/code>就是NIO对于非阻塞socket操作的支持的组件，其在socket上封装了一层, 所以我们先从&lt;code>Socket API&lt;/code>说起。&lt;/p></description></item><item><title>Java NIO分析(8): 高并发核心Selector详解</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%908-%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83selector%E8%AF%A6%E8%A7%A3/</link><pubDate>Thu, 12 Jul 2018 23:11:27 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%908-%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A0%B8%E5%BF%83selector%E8%AF%A6%E8%A7%A3/</guid><description>&lt;p>上节&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%907-nio%E6%A0%B8%E5%BF%83%E4%B9%8Bchannelbuffer%E5%92%8Cselector%E7%AE%80%E4%BB%8B/">Java-NIO分析-7-NIO核心分析之Channel-Buffer和Selector&lt;/a>介绍了&lt;code>Channel&lt;/code>，&lt;code>Buffer&lt;/code>和&lt;code>Selector&lt;/code>的基本用法
有了感性认识之后，来看看Selector的底层是如何实现的。&lt;/p>
&lt;h1 id="1-selector设计">1. Selector设计&lt;/h1>
&lt;p>笔者下载得是&lt;a href="https://download.java.net/openjdk/jdk8">openjdk8&lt;/a>的源码, 画出类图&lt;/p>
&lt;p>![](&lt;a href="http://img.sound2gd.wang/2018/07/14/20180714234754.png-t">http://img.sound2gd.wang/2018/07/14/20180714234754.png-t&lt;/a>&lt;/p>
&lt;p>比较清晰得看到，openjdk中Selector的实现是&lt;code>SelectorImpl&lt;/code>,
然后SelectorImpl又将职责委托给了具体的平台，比如图中框出的linux2.6以后才有的&lt;code>EpollSelectorImpl&lt;/code>, Windows平台则是&lt;code>WindowsSelectorImpl&lt;/code>, &lt;code>MacOSX&lt;/code>平台是&lt;code>KQueueSelectorImpl&lt;/code>.&lt;/p>
&lt;p>从名字也可以猜到，openjdk肯定在底层还是用&lt;code>epoll&lt;/code>,&lt;code>kqueue&lt;/code>，&lt;code>iocp&lt;/code>这些技术来实现的I/O多路复用。前面 &lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%903-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bselect%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">Java-NIO分析-3-I-O多路复用之select系统调用&lt;/a> ,&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%904-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bpoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">Java-NIO分析-4-I-O多路复用之poll系统调用&lt;/a> , &lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%905-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bepoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/">Java-NIO分析-5-I-O多路复用之epoll系统调用&lt;/a>写了3篇来说明其用法，感兴趣的读者可以回头看看。&lt;/p></description></item><item><title>Java NIO分析(7): NIO核心之Channel,Buffer和Selector简介</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%907-nio%E6%A0%B8%E5%BF%83%E4%B9%8Bchannelbuffer%E5%92%8Cselector%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 10 Jul 2018 21:34:17 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%907-nio%E6%A0%B8%E5%BF%83%E4%B9%8Bchannelbuffer%E5%92%8Cselector%E7%AE%80%E4%BB%8B/</guid><description>&lt;p>上次&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%906-%E4%BB%8Ebio%E5%88%B0nio-%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%A6%82%E5%BF%B5/">Java-NIO分析-6-Java-NIO中的概念&lt;/a>讲到了NIO的设计思想,
即&lt;code>Doug Lea&lt;/code>大佬受&lt;code>AWT&lt;/code>启发得到的&lt;strong>事件驱动机制&lt;/strong>, 关键点在于&lt;/p>
&lt;ul>
&lt;li>非阻塞处理器&lt;/li>
&lt;li>事件分发组件&lt;/li>
&lt;/ul>
&lt;p>在NIO的API中，&lt;code>Channel&lt;/code>就是实现非阻塞的组件，而事件分发(Dispatcher)使用的是&lt;code>Selector&lt;/code>组件，
在传统的I/O流(&lt;code>Stream&lt;/code>)是有方向的，而NIO支持双向读写，这样就需要将流中的数据读取到某个缓冲组件里，
即&lt;code>Buffer&lt;/code>组件.&lt;/p>
&lt;p>&lt;code>Buffer&lt;/code>组件还有个特殊的实现&lt;code>DirectByteBuffer&lt;/code>, 可以申请&lt;strong>堆外内存&lt;/strong>，关于为什么要申请堆外内存后续会谈。&lt;/p></description></item><item><title>Java NIO分析(6): 从BIO到NIO-设计和概念</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%906-%E4%BB%8Ebio%E5%88%B0nio-%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%A6%82%E5%BF%B5/</link><pubDate>Fri, 06 Jul 2018 07:04:55 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%906-%E4%BB%8Ebio%E5%88%B0nio-%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%A6%82%E5%BF%B5/</guid><description>&lt;p>前面介绍了Unix的I/O模型以及多路复用的c实现，为什么要介绍这些呢？ 因为JVM是用c++写的，JDK的native方法也都是用c写的，最后它们调用
的还是操作系统底层的api,所以了解一些关键的底层原理还是有必要的。&lt;/p></description></item><item><title>Java NIO分析(5): I/O多路复用之epoll系统调用</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%905-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bepoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link><pubDate>Sun, 01 Jul 2018 17:59:51 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%905-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bepoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid><description>&lt;h1 id="1-epoll概念">1. epoll概念&lt;/h1>
&lt;p>&lt;code>poll&lt;/code>系统调用相比于&lt;code>select&lt;/code>主要解决了文件描述符的数量限制，但是在高并发场景下没有解决根本问题:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>fd数组整体在内核空间和用户空间之间拷贝&lt;/strong>&lt;/li>
&lt;li>&lt;strong>遍历整个fd数组找事件浪费资源&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>这俩性能问题在&lt;strong>Banga&lt;/strong>在1999年写了篇论文&lt;a href="http://static.usenix.org/event/usenix99/full_papers/banga/banga.pdf">A Scalable and Explicit Event
Delivery Mechanism for UNIX&lt;/a>,提出&lt;code>select&lt;/code>和&lt;code>poll&lt;/code>都是无状态的，需要用户空间的进程&lt;strong>自行遍历查找事件&lt;/strong>, 一种改进方案是&lt;strong>内核内部自己维护事件集合&lt;/strong>.通过一个类似&lt;code>declare_interest&lt;/code>的系统调用，内核能够&lt;strong>增量得更新进程感兴趣的事件集合列表&lt;/strong>, 应用进程通过使用&lt;code>get_next_event&lt;/code>调用能派发新事件给内核。&lt;/p>
&lt;p>根据论文的研究成果，&lt;code>LINUX&lt;/code>和&lt;code>FreeBSD&lt;/code>各自给出的解决方案：&lt;code>epoll&lt;/code>和&lt;code>kqueue&lt;/code>.我们主要讨论epoll, 毕竟日常服务端环境都是LINUX.&lt;/p>
&lt;p>在LINUX内核2.6以上，&lt;code>epoll&lt;/code>才受到支持。&lt;/p></description></item><item><title>Java NIO分析(4): I/O多路复用之poll系统调用</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%904-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bpoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link><pubDate>Fri, 29 Jun 2018 11:46:02 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%904-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bpoll%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid><description>&lt;p>&lt;code>poll&lt;/code>系统调用主要解决了&lt;code>select&lt;/code>系统调用的2个问题：&lt;/p>
&lt;ol>
&lt;li>文件描述符数量(fd_setsize = 32)太小, 而且数值是使用宏写死的,这样在32位机器上最大文件描述符数量只有32*32=1024&lt;/li>
&lt;li>文件描述符集(fd_set)这种&lt;code>值-结果参数&lt;/code>的api设计不是很好, select系统调用的时候要分别传读set,写set，更多事件不好细分&lt;/li>
&lt;/ol>
&lt;p>&lt;code>poll&lt;/code>系统调用使用了pollfd数据结构来表示事件数组，没有了&lt;code>fd_setsize&lt;/code>的限制,同时支持更多的事件类型&lt;/p></description></item><item><title>Java NIO分析(3): I/O多路复用之select系统调用</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%903-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bselect%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link><pubDate>Thu, 28 Jun 2018 09:48:07 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%903-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B9%8Bselect%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid><description>&lt;p>前面讲了一些&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%902-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%8E%86%E5%8F%B2%E6%9D%82%E8%B0%88/">Java-NIO分析-2-I-O多路复用历史杂谈&lt;/a>, 谈到了多路复用的发展历史
以及为什么需要它。今天讲广受各大内核支持的&lt;code>select&lt;/code>系统调用,&lt;code>select&lt;/code>允许进程
指定内核等待1个或者多个事件的任何一个发生, 并且只在有它们发生之后或者等待一段时间后才唤醒进程。&lt;/p></description></item><item><title>Java NIO分析(2): I/O多路复用历史杂谈</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%902-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%8E%86%E5%8F%B2%E6%9D%82%E8%B0%88/</link><pubDate>Sun, 17 Jun 2018 09:32:06 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%902-i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%8E%86%E5%8F%B2%E6%9D%82%E8%B0%88/</guid><description>&lt;p>前面&lt;a href="http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%901-unix%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/">Java-NIO分析-1-Unix网络模型&lt;/a>讲过5种经典I/O模型，
现代企业的场景一般是&lt;strong>高并发高流量&lt;/strong>,&lt;strong>长连接&lt;/strong>, 假设硬件资源充足，如何提高应用单机能接受链接的上限?
先讲段历史&lt;/p></description></item><item><title>Java NIO分析(1): Unix网络模型</title><link>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%901-unix%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link><pubDate>Thu, 14 Jun 2018 11:12:00 +0800</pubDate><guid>http://sound2gd.wang/post/java-nio%E5%88%86%E6%9E%901-unix%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid><description>&lt;p>要谈Java的NIO, 还是先从I/O开始说起。
Unix提供了5种不同的I/O模型，分别是&lt;/p>
&lt;ul>
&lt;li>阻塞I/O(blocking I/O)&lt;/li>
&lt;li>非阻塞I/O(non-blocking I/O)&lt;/li>
&lt;li>I/O复用(I/O multiplexing)&lt;/li>
&lt;li>信号驱动式I/O(signal-driven I/O)&lt;/li>
&lt;li>异步I/O(asynchronous I/O)&lt;/li>
&lt;/ul></description></item></channel></rss>